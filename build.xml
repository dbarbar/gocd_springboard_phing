<?xml version="1.0" encoding="UTF-8"?>

<project name="Springboard 4 Build scripts" default="build" phingVersion="2.8.1">

<!-- ### Build project

This is the default build target.

@todo Add check-js-debug in above simpletest if we decide console.log in production code is bad.
@todo Add lint-js-custom and lint-css-custom if we can make the dependencies easier.
@todo phploc, phpmd, phpcpd. Maybe. Need to fullfill dependencies.

-->
  <target name="build"
    description="Gets the code, lints it, runs drush make, site install, dumps the SQL, and tars the code."
    depends="init,
              clean,
              prepare-build-file,
              make,
              lint-php-custom,
              check-php-debug,
              link-settings,
              site-install,
              sql-dump,
              unlink-settings,
              tar-code" />

  <target name="personal-build" depends="init">

  </target>

  <target name="commit-test" depends="init">

  </target>

  <target name="deploy-to-test-env"
    description="Copies the package, does a Chef deploy, imports the DB, and runs a quick smoke test."
    depends="init,
              copy-package,
              create-data-bag-json,
              import-data-bag,
              remote-chef-client,
              deploy-db,
              deploy-smoke-test">

  </target>

    <!--
      Eventual deploy to environment options:
      test,
      uat,
      showcase,
      exploratory,
      capacity
    -->

  <!--
    @todo Drupal provides multiple xml files, one per testsuite.
    We need to combine into a single file that contains all testsuites.
    Then this target could make an html report for it.
  -->
  <target name="report">
    <phpunitreport infile="artifacts/tests/testsuites.xml"
      format="noframes"
      todir="reports"
      usesorttable="true" />
  </target>

  <target name="deploy-smoke-test" depends="init">
    <echo msg="Checking http://${springboard.deploy.domain} for the text '${springboard.deploy.smoke_test_text}'" />
    <exec command="curl --max-time 10 http://${springboard.deploy.domain} | grep '${springboard.deploy.smoke_test_text}'"
      logoutput="true"
      checkreturn="true" />

  </target>

  <target name="component-tests"
    description="Enables simpletest and runs tests."
    depends="init,
              simple-simpletest,
              fail-on-test-failures">

  </target>

  <target name="springboard-core-component-tests"
    description="Enables simpletest and runs Springboard core tests."
    depends="init,
              enable-simpletest,
              get-springboard-simpletests,
              simple-simpletest,
              disable-simpletest,
              fail-on-test-failures">

  </target>

  <target name="acceptance-tests"
    description="Runs Codeception tests."
    depends="init,
              codecept-run">

  </target>

  <!-- @todo This should happen after untarring the package and specifying a version to use. Afterwards tar the package back up for distribution. -->
  <target name="bump-version"
    depends="init">

    <!-- Update springboard module versions -->
    <reflexive>
      <fileset refid="springboard.modules.info" />
      <filterchain>
        <replaceregexp>
          <regexp pattern='version = 7.x-4.x-dev'
                  replace='version = ${springboard.version}' />
        </replaceregexp>
      </filterchain>
    </reflexive>

    <!-- Update springboard theme versions -->
    <reflexive>
      <fileset refid="springboard.themes.info" />
      <filterchain>
        <replaceregexp>
          <regexp pattern='version = 7.x-4.x-dev'
                  replace='version = ${springboard.version}' />
        </replaceregexp>
      </filterchain>
    </reflexive>

    <!-- Update springboard install profile version -->
    <reflexive>
      <fileset refid="springboard.profiles.info" />
      <filterchain>
        <replaceregexp>
          <regexp pattern='version = 7.x-4.x-dev'
                  replace='version = ${springboard.version}' />
        </replaceregexp>
      </filterchain>
    </reflexive>

  </target>


<!-- ## Individual targets -->

  <target name="sql-dump"
    description="Dump the existing database to a sql file."
    depends="setup-phing-drush, link-settings">

    <drush command="sql-dump" assume="yes">
      <option name="gzip"></option>
      <option name="result-file">../${springboard.build_number}.sql</option>
    </drush>

  </target>

  <target name="prepare-build-file"
    description="Downloads build files and replaces springboard versions with commit hashes.">

    <httpget url="https://raw.githubusercontent.com/JacksonRiver/Springboard-Build/${springboard.build.commit}/springboard-core.make"
             dir="artifacts"
             sslVerifyPeer="false" />

    <httpget url="https://raw.githubusercontent.com/JacksonRiver/Springboard-Build/${springboard.build.commit}/springboard-mtsb.make"
             dir="artifacts"
             sslVerifyPeer="false" />

    <reflexive>
    <fileset dir="artifacts">
      <include pattern="springboard-core.make" />
      <include pattern="springboard-mtsb.make" />
    </fileset>
    <filterchain>
      <replaceregexp>
        <regexp
          pattern="projects\[sbsetup\]\[download\]\[branch\] = (.+)"
          replace="projects[sbsetup][download][branch] = ${springboard.profiles.commit}"
          />
        <regexp
          pattern="projects\[springboard_themes\]\[download\]\[branch\] = (.+)"
          replace="projects[springboard_themes][download][branch] = ${springboard.themes.commit}"
          />
        <regexp
          pattern="projects\[springboard\]\[download\]\[branch\] = (.+)"
          replace="projects[springboard][download][branch] = ${springboard.modules.commit}"
          />
        <regexp
          pattern="projects\[encrypt\]\[patch\]\[\] = https://raw\.github\.com/JacksonRiver/Springboard\-Build/(.+)/patches/encrypt\-trim\-only\-decrypted\-output\.patch"
          replace="projects[encrypt][patch][] = https://raw.github.com/JacksonRiver/Springboard-Build/${springboard.build.commit}/patches/encrypt-trim-only-decrypted-output.patch"
          />
        </replaceregexp>
      </filterchain>
    </reflexive>

  </target>

  <target name="link-settings"
          description="Creates a symlink to the settins.php file.">
    <symlink target="../../../../resources/settings.php" link="artifacts/src/sites/default/settings.php" overwrite="true" />
  </target>

  <target name="unlink-settings"
          description="Removes the symlink to the settings file.">
    <delete file="artifacts/src/sites/default/settings.php" />
  </target>

  <target name="tar-code"
          description="Makes a tar.gz file of the source code."
          depends="unlink-settings">

    <delete dir="artifacts/src/sites/default/files" />
    <tar destfile="artifacts/springboard-${springboard.build_number}.tar.gz"
         basedir="artifacts/src"
         compression="gzip"
         includeemptydirs="true" />

  </target>

  <target name="deploy-db"
    description="Copies and imports the database to the remote site."
    depends="init,
              setup-phing-drush">

    <exec command="ssh ${springboard.deploy.remote_host} 'mkdir -p /root/sql'"
      checkreturn="true"
      logoutput="true" />
    <exec command="scp ../sql/${springboard.version}.sql.gz ${springboard.deploy.remote_host}:/root/sql/"
      checkreturn="true"
      logoutput="true" />
    <exec command="ssh ${springboard.deploy.remote_host} 'zcat /root/sql/${springboard.version}.sql.gz | drush @${springboard.version} sql-cli'"
      checkreturn="true"
      logoutput="true" />
    <exec command="ssh ${springboard.deploy.remote_host} 'rm -rf /root/sql'"
      checkreturn="true"
      logoutput="true" />

  </target>

  <target name="copy-package"
          description="Copies the package to the remote server."
          depends="init">

    <exec command="scp ../src/springboard-${springboard.version}.tar.gz ${springboard.deploy.remote_host}:/var/www/springboard-releases"
          logoutput="true"
          checkreturn="true" />

  </target>


<target name="create-data-bag-json"
        description="Creates the json file for the data bag."
        depends="init">
  <copy file="resources/build-site.json"
        tofile="artifacts/${springboard.version}.json"
        overwrite="true">
    <filterchain>
      <replacetokens begintoken="%" endtoken="%">
        <token key="ID" value="${springboard.version}" />
        <token key="DOMAIN" value="${springboard.deploy.domain}" />
        <token key="DB_PASSWORD" value="${springboard.db_password}" />
        <token key="RELEASE_URL" value="${springboard.deploy.destination}/springboard-${springboard.version}.tar.gz" />
        <token key="RELEASE_TAG" value="${springboard.version}" />
      </replacetokens>
    </filterchain>
  </copy>
</target>

<target name="import-data-bag"
        description="Adds the data bag item json file to the data bag via knife."
        depends="init">

      <exec command="knife data bag from file hosted-clients artifacts/${springboard.version}.json"
        logoutput="true"
        checkreturn="true" />

</target>

<target name="remove-data-bag"
        description="Remove the data bag item via knife."
        depends="init">

      <exec command="knife data bag delete hosted-clients ${springboard.version} -y"
        logoutput="true"
        checkreturn="true" />

</target>

<target name="remote-chef-client"
        description="Run chef-client on the remote host."
        depends="init">

  <exec command="ssh ${springboard.deploy.remote_host} chef-client -c /etc/chef/knife.rb"
          logoutput="true"
          checkreturn="true" />

</target>

<!-- ### PHP linting - Check files for syntax errors. -->
  <target name="lint-php"
          description="Check all PHP files for syntax errors using PHPLint"
          depends="init">
    <phplint haltonfailure="true">
      <fileset refid="src.php" />
    </phplint>
  </target>

  <target name="lint-php-custom"
          description="Check custom PHP files for syntax errors using PHPLint"
          depends="init">
    <phplint haltonfailure="true">
      <fileset refid="src.php.custom" />
    </phplint>
  </target>

<!-- ### Javascript linting

Checks code against [jslint](http://www.jslint.com/) to assure a coding
standard is followed and detect potential problems. By default
[jslint´](https://github.com/mikewest/JSLint) is used. -->
  <target name="lint-js"
          description="Check all Javascript files using JSlint"
          depends="init, setup-jslint4java, setup-jslint">
    <foreach target="jslint-file" param="filename" absparam="absfilename">
      <fileset refid="src.js"/>
    </foreach>
  </target>

  <target name="lint-js-custom"
          description="Check custom Javascript files using JSlint"
          depends="init, setup-jslint4java, setup-jslint">
    <foreach target="jslint-file" param="filename" absparam="absfilename">
      <fileset refid="src.js.custom"/>
    </foreach>
  </target>

<!-- #### jslint a file

No need to run `init` or setup targets here. This target should only be called
from parent `lint-js` targets. -->
  <target name="jslint-file">
    <echo>Linting file: ${absfilename}</echo>

    <!-- Execute jslint4java and return the result in checkstyle format-->
    <exec command="java -jar ${jslint4java.file}
                   --jslint ${jslint.file} --report checkstyle ${absfilename}"
          outputProperty="report" />

    <!-- Print the result to a file.
         Replace / with - in path to create legal filenames in the format
         `checkstyle-jslint-dir1-dir2-file.js.xml`. -->
    <php function="str_replace" returnProperty="filename.normalized">
      <param value="/" />
      <param value="-" />
      <param value="${filename}" />
    </php>
    <delete file="${project.logdir}/checkstyle-jslint-${filename.normalized}.xml" />
    <append text="${report}"  destFile="${project.logdir}/checkstyle-jslint-${filename.normalized}.xml" />
  </target>

  <!-- #### Setup jslint4java -->
  <target name="setup-jslint4java"
          depends="init"
          unless="project.jslint4java.setup">
    <property name="jslint4java.dir"
              value="${project.toolsdir}/jslint4java" />
    <php function="basename" returnProperty="jslint4java.basename">
      <param value="${jslint4java.url}" />
      <!-- We assume that the version of jslint4java used is a distribution
           where the filename ends in `-dist.zip` -->
      <param value="-dist.zip" />
    </php>

    <!-- Download and unpack jslint4java -->
    <mkdir dir="${jslint4java.dir}" />
    <php function="basename" returnProperty="jslint4java.zipfile">
      <param value="${jslint4java.url}" />
    </php>
    <httpget url="${jslint4java.url}"
             dir="${jslint4java.dir}"
             proxy="${phing.httpget.proxy}" />
    <unzip file="${jslint4java.dir}/${jslint4java.zipfile}"
           todir="${jslint4java.dir}" />

    <!-- Other targets use this property to determine the location of the
         `jslint4java.jar` file -->
    <property name="jslint4java.file"
 value="${jslint4java.dir}/${jslint4java.basename}/${jslint4java.basename}.jar"/>

    <!-- Set property to prevent unnecessary additional invocations of this
         target -->
    <property name="project.jslint4java.setup" value="true" />
  </target>

  <!-- #### Setup jslint -->
  <target name="setup-jslint"
          depends="init"
          unless="project.jslint.setup">
    <phingcall target="setup-git-repo">
      <property name="repo.dir" value="${project.toolsdir}/jslint"/>
      <property name="repo.url" value="${jslint.repository.url}" />
    </phingcall>

    <!-- Other targets use this property to determine the location of the jslint
         file -->
    <property name="jslint.file"
              value="${project.toolsdir}/jslint/${jslint.file}"
              override="true" />

    <!-- Set property to prevent unnecessary additional invocations of this
         target -->
    <property name="project.jslint.setup" value="true" />
  </target>

<!-- ### CSS linting

Checks code against [CSS Lint](http://www.csslint.net/) to help point out problems with CSS code. It does basic syntax checking as well as applying a set of rules to the code that look for problematic patterns or signs of inefficiency. -->
  <target name="lint-css"
          description="Check all CSS files using CSS Lint"
          depends="init, setup-rhino, setup-csslint">
    <foreach target="csslint-file" param="filename" absparam="absfilename">
      <fileset refid="src.css"/>
    </foreach>
  </target>

  <target name="lint-css-custom"
          description="Check custom CSS files using CSS Lint"
          depends="init, setup-rhino, setup-csslint">
    <foreach target="csslint-file" param="filename" absparam="absfilename">
      <fileset refid="src.css.custom"/>
    </foreach>
  </target>

<!-- #### csslint a file

No need to run `init` or setup targets here. This target should only be called
from parent `lint-css` targets. -->
  <target name="csslint-file">
    <echo>Linting file: ${absfilename}</echo>

    <!-- Run csslint through Rhino and return the result in
         checkstyle format-->
    <exec command="java -jar ${rhino.jar} ${csslint.rhino.file}
                   --format=checkstyle-xml --rules=${csslint.rules}
                   ${absfilename}"
          outputProperty="report" />

    <!-- Print the result to a file.
         Replace / with - in path to create legal filenames in the format
         `checkstyle-csslint-dir1-dir2-file.css.xml`. -->
    <php function="str_replace" returnProperty="filename.normalized">
      <param value="/" />
      <param value="-" />
      <param value="${filename}" />
    </php>

    <property name="csslint.report.file" value="${project.logdir}/checkstyle-csslint-${filename.normalized}.xml" />
    <delete file="${csslint.report.file}" />
    <append text="${report}"  destFile="${csslint.report.file}" />


    <!-- Cleanup the break rules property.
         Hyphens are removed to support both input and output rule format.
         csslint-rule becomes CsslintRule.
         Seperators (Commas and multiple whitespace characters) are reduced
         to a pipe to be used in a regular expression. -->
         <php expression="str_replace('-', '', '${csslint.rules.break}')"
              returnProperty="csslint.rules.break"/>
         <php expression="preg_replace('/(\s+|\s*,\s*)/', '|', '${csslint.rules.break}')"
              returnProperty="csslint.rules.break"/>

    <!-- If any rules which require the build to break are defined then
         look for them. -->
    <if>
      <not>
        <equals arg1="${csslint.rules.break}" arg2="" />
      </not>
      <then>
        <!-- CSS Lint reports checkstyle errors using the format
             net.csslint.RuleName. Load all checkstyle reports and look for
             errors with such a source from the provided rules. -->
        <loadfile property="csslint.break.errors"
                  file="${csslint.report.file}">
          <filterchain>
            <linecontainsregexp>
                <regexp pattern="(net\.csslint\.(${csslint.rules.break}))"
                        ignoreCase="true" />
              </linecontainsregexp>
          </filterchain>
        </loadfile>

        <!-- Break if any errors from the provided rules are detected! -->
        <if>
          <not>
            <equals arg1="${csslint.break.errors}" arg2="" />
          </not>
          <then>
            <fail message="CSS error detected in file ${absfilename}" />
          </then>
        </if>
      </then>
    </if>
  </target>

   <!-- #### Setup csslint -->
   <target name="setup-csslint"
           depends="init"
           unless="project.csslint.setup">
     <phingcall target="setup-git-repo">
       <property name="repo.dir"
                 value="${project.toolsdir}/csslint"/>
       <property name="repo.url"
                 value="${csslint.repository.url}" />
       <property name="repo.revision"
                 value="${csslint.repository.revision}" />
     </phingcall>

     <!-- Other targets use this property to determine the location of the
          csslint rhino file -->
     <property name="csslint.rhino.file"
               value="${project.toolsdir}/csslint/release/csslint-rhino.js" />

     <!-- Set property to prevent unnecessary additional invocations of this
          target -->
     <property name="project.csslint.setup" value="true" />
   </target>

<!-- ### Debug code detection

Code should not call functions which are usually used for debugging.
This belongs on developer environments - not VCS. This goes for mentioning
them in comments as well. -->
  <target name="check-php-debug"
          description="Check custom PHP code for debug statements"
          depends="init">
    <phingcall target="check-debug">
      <property name="debug.language" value="PHP" override="true" />
      <property name="debug.pattern" value="(var_dump\(|dsm\(|dpm\()"
                override="true" />
      <property name="debug.fileset" value="src.php.custom"/>
    </phingcall>
  </target>

  <target name="check-js-debug"
          description="Check custom Javascript code for debug statements">
    <phingcall target="check-debug">
      <property name="debug.language" value="Javascript" override="true" />
      <property name="debug.pattern" value="(console\.log\()" override="true" />
      <property name="debug.fileset" value="src.js.custom"/>
    </phingcall>
  </target>

  <!-- #### Check a fileset for debug code -->
  <target name="check-debug"
          depends="init">
    <php function="strtolower" returnProperty="debug.language.lower">
      <param value="${debug.language}" />
    </php>
    <property name="debug.output"
              value="artifacts/debug_${debug.language.lower}.txt"
              override="true" />
    <delete file="${debug.output}"/>
    <append text="" destFile="${debug.output}" />

    <foreach target="check-debug-file" param="filename"
             absparam="absfilename">
      <fileset refid="${debug.fileset}"/>
    </foreach>

    <loadfile property="debug.lines" file="${debug.output}" />
    <!-- Break if debug code is detected! -->
    <if>
      <not>
        <equals arg1="${debug.lines}" arg2="" />
      </not>
      <then>
        <fail message="${debug.language} debug code detected:${line.separator}
                       ${debug.lines}" />
      </then>
    </if>
  </target>

<!-- #### Check an individual file for debug code

No need to run `init` here. This target should only be called through parent
`check-debug` target. -->
  <target name="check-debug-file">
    <echo>Checking file for debug statements: ${absfilename}</echo>
    <loadfile property="debug.lines" file="${absfilename}">
      <filterchain>
        <linecontainsregexp>
            <regexp pattern="${debug.pattern}" />
          </linecontainsregexp>
      </filterchain>
    </loadfile>
    <if>
      <not>
        <equals arg1="${debug.lines}" arg2="" />
      </not>
      <then>
        <append text="${filename}:${line.separator}
                      ${debug.lines}${line.separator}
                      ${line.separator}"
                destFile="${debug.output}"/>
      </then>
    </if>
  </target>

<!-- ### Detect code mess

Uses [PHPMD](http://phpmd.org/) to detect code mess and look for potential
problems. -->
  <target name="phpmd"
          description="Generate pmd.xml using PHPMD"
          depends="init">
    <!-- We do not use the unusedcode ruleset as Drupal hook implementations
         usually are declared with all arguements but may not use them
         all. -->
    <phpmd rulesets="codesize,naming,design">
      <fileset refid="src.php.custom" />
      <formatter type="xml" outfile="artifacts/pmd.xml"/>
    </phpmd>
  </target>

<!-- ### Detect potential copy/pasting

Uses [phpcpd](https://github.com/sebastianbergmann/phpcpd) to detect duplicate
code. This indicates potential refactorings.-->
  <target name="phpcpd"
          description="Generate pmd-cpd.xml using phpcpd"
          depends="init">
    <phpcpd>
      <fileset refid="src.php.custom" />
      <formatter type="pmd" outfile="artifacts/pmd-cpd.xml"/>
    </phpcpd>
  </target>

<!-- ### Generate code statistics

Measures the size of the project using
[phploc](http://sebastianbergmann.github.com/phploc/) and generates
statistics. -->
  <target name="phploc"
          description="Generate phploc.csv using phploc"
          depends="init, setup-phing-phploc">
    <!-- Suffixes should be the same as included in the
         src.php filesets -->
    <phploc reportType="csv"
            reportName="phploc" reportDirectory="artifacts"
            suffixes="php,module,inc,install,profile,test" countTests="true">
      <fileset refid="src.php.custom" />
    </phploc>
  </target>

  <!-- #### Setup Phing phploc integration -->
  <target name="setup-phing-phploc"
          depends="init" >
    <!-- Register the custom Phing task -->
    <taskdef name="phploc" classname="PHPLocTask"
             classpath="tools" />
  </target>

<!-- ### Review code using PHP_CodeSniffer

The purpose and outcome of this target is the same as the coder-review
targets. In general [PHP_CodeSniffer](http://pear.php.net/package/PHP_CodeSniffer/)
is faster to execute but there does not seem to be a complete ruleset which
covers all of the
[Drupal coding standards](http://drupal.org/coding-standards).

Consequently `coder-review-d6/7` and not `phpcs` is used for the main targets.
-->
    <target name="phpcs"
            description="Generate checkstyle.xml using PHP_CodeSniffer"
            depends="init">
      <!-- Clone a repository containing Drupal code guidelines for
           PHP_CodeSniffer. -->
      <phingcall target="setup-git-repo">
        <property name="repo.dir" value="${project.toolsdir}/drupalcs"/>
        <property name="repo.url" value="${phpcs.drupalcs.repository.url}" />
      </phingcall>
      <!-- There is no Phing task for PHP Codesniffer in v2.4.6.
           It's coming for v2.5. Execute while we wait. -->
      <exec command="phpcs --report=checkstyle
                    --report-file=${project.logdir}/checkstyle-codesniffer.xml
                    --standard=${project.toolsdir}/drupalcs/ruleset.xml
                    --extensions=php,inc
                    --ignore=*/contrib/*,*/*.features.*,*/*.field_group.inc,*/*.layout.*,*/*.pages_default.*,*/*.panels_default.*,*/*strongarm.inc,*/*.views_default.inc
                    ${project.sitesdir}"
            logoutput="true" />
    </target>

  <target name="get-all-simpletests" depends="init">

    <exec command="ssh ${springboard.deploy.remote_host} 'drush @${springboard.version} test-run --fields=class --format=csv > /root/tests/all-tests-${springboard.version}.csv"
      checkreturn="true"
      logoutput="true" />

    <exec command="scp ${springboard.deploy.remote_host}:/root/tests/all-tests-${springboard.version}.csv artifacts/all-tests.csv" />

    <exec command="php tools/parse_tests.php"
      checkreturn="true"
      logoutput="true"
      outputProperty="springboard.tests" />

  </target>

  <target name="get-springboard-simpletests"
    depends="init">

    <exec command="scp tools/springboard_core_tests.php ${springboard.deploy.remote_host}:/root/tests/"
      checkreturn="true"
      logoutput="true" />

    <exec command="ssh ${springboard.deploy.remote_host} 'drush @${springboard.version} scr /root/tests/springboard_core_tests.php > /root/tests/all-tests-${springboard.version}.csv'"
      checkreturn="true"
      logoutput="true" />

    <exec command="scp ${springboard.deploy.remote_host}:/root/tests/all-tests-${springboard.version}.csv artifacts/all-tests.csv" />

    <exec command="php tools/parse_tests.php"
      checkreturn="true"
      logoutput="true"
      outputProperty="springboard.tests" />

  </target>

  <target name="enable-simpletest" depends="init">
    <exec command="ssh ${springboard.deploy.remote_host} 'drush @${springboard.version} en simpletest -y ; drush @${springboard.version} test-clean -y'"
      checkreturn="true"
      logoutput="true" />
  </target>

  <target name="disable-simpletest" depends="init">
    <exec command="ssh ${springboard.deploy.remote_host} 'drush @${springboard.version} dis simpletest -y ; drush @${springboard.version} pm-uninstall simpletest -y'"
      checkreturn="true"
      logoutput="true" />
  </target>

  <target name="simple-simpletest"
    depends="init">

    <delete dir="artifacts/tests" />
    <mkdir dir="artifacts/tests" />
    <exec command="ssh ${springboard.deploy.remote_host} 'rm -rf /root/tests/${springboard.version} ; mkdir -p /root/tests/${springboard.version} ; chmod 777 /root/tests/${springboard.version}'"
      checkreturn="true"
      logoutput="true" />

    <exec command="ssh ${springboard.deploy.remote_host} 'drush @${springboard.version} test-run ${springboard.tests} --xml=/root/tests/${springboard.version}'"
      checkreturn="true"
      logoutput="true" />
    <exec command="scp -r ${springboard.deploy.remote_host}:/root/tests/${springboard.version} artifacts/tests"
      checkreturn="true"
      logoutput="true" />

  </target>

  <target name="fail-on-test-failures"
    depends="init">

    <!--
    Very important that we don't check the exit code here (checkreturn).
    All tests passing would be a exit code of 1 (string not found)
    but an output value of 0.
    -->
    <exec command="cat artifacts/tests/${springboard.version}/*.xml | grep -c 'failure message'"
      logoutput="false"
      outputProperty="failures"
      checkreturn="false" />

    <if>
      <not>
        <equals arg1="${failures}" arg2="0" />
      </not>
      <then>
        <property name="shouldfail" value="true" />
      </then>
    </if>

    <fail if="shouldfail" message="${failures} test failures" />

  </target>

  <target name="setup-codeception"
    depends="init">

    <exec command="gunzip ../sql/${springboard.version}.sql.gz"
      checkreturn="true"
      logoutput="true" />

    <copy file="resources/acceptance.suite.yml"
          tofile="../acceptance-tests/tests/acceptance.suite.yml"
          overwrite="true">
      <filterchain>
        <replacetokens begintoken="%" endtoken="%">
          <token key="URL" value="http://${springboard.deploy.domain}" />
          <token key="BROWSER" value="firefox" />
        </replacetokens>
      </filterchain>
    </copy>

    <copy file="resources/codeception.yml"
          tofile="../acceptance-tests/codeception.yml"
          overwrite="true">
      <filterchain>
        <replacetokens begintoken="%" endtoken="%">
          <token key="DSN" value="mysql:host=${springboard.deploy.domain};dbname=${springboard.version}" />
          <token key="USER" value="${springboard.version}" />
          <token key="PASSWORD" value="${springboard.db_password}" />
          <token key="DUMP" value="../sql/${springboard.version}.sql" />
        </replacetokens>
      </filterchain>
    </copy>

  </target>

  <target name="codecept-run"
    depends="init, setup-codeception">

    <!--
    Running the command this way because the permissions get messy.
    -->
    <exec command="cd ../acceptance-tests ; php vendor/codeception/codeception/codecept run --html --xml"
      checkreturn="true"
      logoutput="true" />

  </target>

  <!-- ### Run simpletests

Execution of this target can be skipped by setting the
 `project.simpletest.skip` property from the command line or in other targets.
-->
  <target name="simpletest"
          description="Run all unit tests"
          depends="init, setup-phing-drush, enable-simpletest"
          unless="project.simpletest.skip">
    <!-- Enable simpletest module. If using Drupal 6 the module will be
         downloaded as well. -->
    <phingcall target="enable-module">
      <property name="module" value="simpletest"/>
    </phingcall>

    <if>
      <isset property="drupal.uri" />
      <then>

        <!-- Get a list of all available test cases -->
        <drush command="test-run" uri="${drupal.uri}" root="${project.drupal.dir}" returnProperty="tests" returnGlue="${line.separator}"/>

        <!-- The project list is piped through a file as this seems to be
             the only way to handle filtering of values in Phing. -->
        <delete file="${project.logdir}/tests.txt" />
        <append text="${tests}" destFile="${project.logdir}/tests.txt" />

        <!-- Build a regular expression to match test groups based on the
             set properties. The expression should be in the format
             `^\s?(prefix1|prefix2|prefix3)_`. -->
        <php expression="'^\s?(' . preg_replace('/(\s+|\s*,\s*)/', '|', '${project.code.prefix}') .').*'"
             returnProperty="project.code.prefix.regex"/>

        <!-- Load the list of tests but keep only the test groups matching our
             prefixes. -->
        <loadfile property="project.simpletest.tests"
                  file="${project.logdir}/tests.txt">
          <filterchain>
            <linecontainsregexp>
              <regexp pattern="${project.code.prefix.regex}" ignoreCase="true"/>
            </linecontainsregexp>
          </filterchain>
        </loadfile>

        <!-- Transform the list of filtered test groups in the form

        Groupname 1             Groupname 1
        Groupname 2             Groupname 2

        into a list of comma separated unique group names `Groupname 1,Groupname 2`. -->
        <php expression="implode(',', array_unique(preg_split('/(\s{2,}|\r|\n)/', trim('${project.simpletest.tests}', PREG_SPLIT_NO_EMPTY))))"
             returnProperty="project.simpletest.tests"/>

        <!-- Run the tests and generate JUnit XML reports. This requires
             Drush 4.5 or newer or [a patch](http://drupal.org/node/1109408). -->
        <drush command="test-run" uri="${drupal.uri}" root="${project.drupal.dir}" haltonerror="false">
          <param>${project.simpletest.tests}</param>
          <option name="xml">${project.testdir}</option>
          </drush>
      </then>
      <else>
        <echo msg="You must set the drupal.uri property to get simpletests working." />
      </else>
    </if>

  </target>

<!-- ## Helper targets

These targets are used throughout the project and should normally not be
executed directly.-->

<!-- ### Initialization

This target sets up many of the common resources used throughout the build.
All other targets except dependencies for this target should depend on this
unless specifically stated why. -->
  <target name="init"
          depends="load-properties, setup-dirs, setup-filesets"
          unless="project.initialized">
    <!-- Set property to prevent target from being executed multiple times -->
    <property name="project.initialized" value="true"/>
  </target>

<!-- ### Load properties

Loads a set of project specific properties from a `.properties` file.

These properties contain information regarding the individual project and/or
environment such as which version of Drupal you are using, how to create a
database and the names of your custom modules.

All available properties are described and set to a default value in
[`build.default.properties`](https://raw.github.com/reload/phing-drupal-template/master/build.default.properties).
You should create your own properties file by copying the
`build.default.properties` file to the root directory, rename it
`build.properties` and modify it according to your project.

Both property files are loaded so your custom `build.properties` file should
only contain properties where you want to override the default value e.g. set
your custom module code prefix or use a special version of one of the build
tools. -->
  <target name="load-properties">
    <php function="dirname" returnProperty="phing.dir">
      <param value="${phing.file}"/>
    </php>

    <property name="project.basedir" value="${phing.dir}" />

    <!-- Use condition instead of unless property as we cannot unset properties in Phing -->
    <if>
      <or>
        <!-- `istrue` evaluates to true is value is not set we need to check
             `isset` as well -->
        <not><istrue value="${project.properties.loaded}" /></not>
        <not><isset property="project.properties.loaded" /></not>
      </or>
      <then>

        <!-- By default use default properties file
             `build.default.properties` -->
        <property name="project.properties.file"
                  value="${phing.dir}/build.default.properties" />
        <!-- Load the default properties.
             Override in case `load-properties` are called multiple times. -->
        <property file="${project.properties.file}" override="true" />

        <!-- Allow override using `build.properties` in build file
             directory -->
        <available file="${phing.dir}/build.properties"
                   property="project.properties.file"
                   value="${phing.dir}/build.properties" />
        <!-- Allow override using `build.properties` in project base
             directory -->
        <available file="${project.basedir}/build.properties"
                   property="project.properties.file"
                   value="${project.basedir}/build.properties" />

        <!-- Load the overriding properties. -->
        <property file="${project.properties.file}" override="true" />

        <!-- Sanitize the domain name by removing periods from the version string. -->
        <php function="str_replace" returnProperty="springboard.version.normalized">
          <param value="." />
          <param value="-" />
          <param value="${springboard.version}" />
        </php>

        <property name="springboard.deploy.domain" value="${springboard.version.normalized}.${springboard.deploy.domain_suffix}" />

        <!-- Set property to prevent unnecessary additional invocations of this target -->
        <property name="project.properties.loaded" value="true" />
      </then>
    </if>
  </target>

<!-- ### Setup directories

Define working directories - where the individual parts of the build are and
should be located. These are used in other targets.

This is part of the initialization of the build. This target should only be
called from `init` target. -->
  <target name="setup-dirs"
          depends="load-properties">
    <if>
      <isset property="drupal.make.dir"/>
      <then>
        <property name="project.drupal.dir"
                value="${project.basedir}/${drupal.make.dir}" />
      </then>
      <else>
        <property name="project.drupal.dir"
                value="${project.basedir}" />
      </else>
    </if>

    <property name="project.sitesdir"
              value="${project.drupal.dir}/${project.code.dir}" />
    <property name="project.builddir"
              value="${project.basedir}/build" />
    <property name="project.toolsdir"
              value="${project.builddir}/tools" />
    <property name="project.coveragedir"
              value="${project.builddir}/coverage" />
    <property name="project.logdir"
              value="${project.builddir}/logs" />
    <property name="project.testdir"
              value="${project.builddir}/tests" />
  </target>

<!-- ### Drush Make

Download and install the source code for the site using Drush Make.

This target is only executed if the project uses make files as configured
in the `build.properties` file. Execution can also be skipped by setting the
`project.make.skip` property from the command line or in other targets.

This is part of the initialization of the build. This target should only be
called from `init` target. -->
  <target name="make"
          depends="setup-phing-drush">

    <!-- Delete any prexisting builds -->
    <delete dir="${drupal.make.dir}" />

    <drush command="make" assume="yes">
      <param>${drupal.make.file}</param>
      <param>${drupal.make.dir}</param>
    </drush>

  </target>

<!-- ### Setup file sets

Setup file sets - patterns for different aspects of the source code.
These are used in other targets.

This is part of the initialization of the build. This target should only be
called from `init` target. -->
  <target name="setup-filesets"
          depends="load-properties">
    <!-- Define pattern sets for future reference -->

    <patternset id="info">
      <include name="**/*.info" />
    </patternset>

    <!-- PHP files -->
    <patternset id="php">
      <include name="**/*.php" />
      <include name="**/*.module" />
      <include name="**/*.install" />
      <include name="**/*.inc" />
      <include name="**/*.profile" />
      <include name="**/*.test" />
    </patternset>

    <!-- Javascript files -->
    <patternset id="js">
      <include name="**/*.js" />
      <!-- Minimized JavaScript files should not be analyzed.
           In their optimized state they can not be expexted
           to conform to coding standards. -->
      <exclude name="**/*.min.js" />
      <exclude name="**/*packed.js" />
    </patternset>

    <!-- CSS files -->
    <patternset id="css">
      <include name="**/*.css" />
      <!-- Added by David because csslint complains about minified bootstrap -->
      <exclude name="**/*.min.css" />
    </patternset>

    <!-- Directories for community contributed code. We exclude these from
         code analysis as we cannot be held responsible for any problems
         here. -->
    <patternset id="contrib">
      <exclude name="**/contrib/**/*.*" />
      <exclude name="**/libraries/**/*.*" />
      <exclude name="**/developer/**/*.*" />
    </patternset>

    <!-- We exclude generated files from We exclude these from code analysis
         as we cannot be held responsible for any problems here. -->
    <patternset id="generated">
      <exclude name="**/*.features.*" />
      <exclude name="**/*.field_group.inc" />
      <exclude name="**/*.layouts.inc" />
      <exclude name="**/*.pages_default.inc" />
      <exclude name="**/*.panels_default.inc" />
      <exclude name="**/*.strongarm.inc" />
      <exclude name="**/*.views_default.inc" />
    </patternset>

    <!-- Define file sets for future reference -->

    <!-- Springboard profiles .info file -->
    <fileset id="springboard.profiles.info" dir="${springboard.profiles.dir}">
      <patternset refid="info" />
    </fileset>

    <!-- Springboard modules .info files -->
    <fileset id="springboard.modules.info" dir="${springboard.modules.dir}">
      <patternset refid="info" />
    </fileset>

    <!-- Springboard themes .info files -->
    <fileset id="springboard.themes.info" dir="${springboard.themes.dir}">
      <patternset refid="info" />
    </fileset>

    <!-- All PHP files -->
    <fileset id="src.php" dir="${project.drupal.dir}">
      <patternset refid="php"/>
    </fileset>

    <!-- Custom PHP files -->
    <fileset id="src.php.custom" dir="${project.sitesdir}">
      <patternset refid="php"/>
      <patternset refid="contrib"/>
      <patternset refid="generated"/>
    </fileset>

    <!-- All Javascript files -->
    <fileset id="src.js" dir="${project.drupal.dir}">
      <patternset refid="js" />
    </fileset>

    <!-- Custom Javascript files -->
    <fileset id="src.js.custom" dir="${project.sitesdir}">
      <patternset refid="js" />
      <patternset refid="contrib" />
    </fileset>

    <!-- All CSS files -->
    <fileset id="src.css" dir="${project.basedir}">
      <patternset refid="css" />
    </fileset>

    <!-- Custom CSS files -->
    <fileset id="src.css.custom" dir="${project.sitesdir}">
      <patternset refid="css" />
      <patternset refid="contrib" />
    </fileset>

  </target>

<!-- ### Clean working environment  -->
  <target name="clean"
          description="Clean up and create artifact directories"
          depends="setup-dirs"
          unless="project.cleaned">
    <!-- Delete any existing artifacts from a previous build.
         Do not delete builddir. It may contain the build file! -->
    <delete dir="artifacts"/>
    <mkdir dir="artifacts" />
    <!-- <delete dir="src"/> -->

    <!-- Set property to prevent target from being executed multiple times -->
    <property name="project.cleaned" value="true"/>
  </target>

<!-- ### Install a Drupal site

This initializes a Drupal site using a installation profile.

Configuration of which installation profile and database to use in done in
`build.properties`. -->
  <target name="site-install"
          depends="setup-phing-drush, link-settings"
          unless="project.installed">

    <drush command="site-install" assume="yes">
      <option name="account-name">${drupal.account_name}</option>
      <option name="account-pass">${drupal.account_pass}</option>
      <option name="account-mail">${drupal.account_mail}</option>
      <option name="clean-url">${drupal.clean_url}</option>
      <option name="site-mail">${drupal.site_mail}</option>
      <option name="site-name">${drupal.site_name}</option>
      <param>sbsetup</param>
    </drush>
    <!-- Fix permissions for the default site directory and settings. The
         owner must be able to delete the directories during subsequent
         builds. -->
    <chmod file="artifacts/src/sites/default/"
           mode="0755" failonerror="true"/>
    <chmod file="artifacts/src/sites/default/default.settings.php"
           mode="0644" failonerror="true"/>
    <chmod file="artifacts/src/sites/default/settings.php"
           mode="0644" failonerror="true"/>

    <!-- Set property to prevent target from being executed multiple times -->
    <property name="project.installed" value="true"/>
  </target>

  <!-- ### Download and enable a project/module -->
  <target name="enable-module"
          depends="setup-phing-drush">
    <!-- If project is not set then we assume that the module name is also
         the project name. -->
    <property name="project" value="${module}" override="no"/>

    <!-- If the module is not already available then download it -->
    <drush command="pm-list" returnProperty="modules.available"/>
    <php function="strpos" returnProperty="module.available">
      <param>${modules.available}</param>
      <param>${module}</param>
    </php>
    <if>
      <not><istrue value="${module.available}"/></not>
      <then>
        <!-- Download specific version if specified -->
        <condition property="download" value="${project}-${project.version}">
          <isset property="project.version"/>
        </condition>
        <property name="download" value="${project}" override="false"/>

        <drush command="pm-download" assume="yes">
          <param>${download}</param>
        </drush>
      </then>
    </if>

    <!-- Enable the module -->
    <drush command="pm-enable" assume="yes">
      <param>${module}</param>
    </drush>
  </target>

  <!-- ### Clone a git repository -->
  <target name="setup-git-repo">
    <!-- Only clone if repository does not exist already -->
    <if>
      <not><available file="${repo.dir}" /></not>
      <then>
        <!-- Set revision to HEAD if not already defined -->
        <property name="repo.revision" value="HEAD" override="false"/>

        <echo>Cloning ${repo.url} ${repo.revision} into ${repo.dir}</echo>
        <!-- The [`gitclone` task](http://www.phing.info/docs/guide/stable/chapters/appendixes/AppendixC-OptionalTasks.html#GitCloneTask)
             does not seem to work. Use exec instead. -->
        <exec command="git clone ${repo.url} ${repo.dir}" />
        <exec command="git checkout ${repo.revision}" dir="${repo.dir}"/>
      </then>
    </if>
  </target>

  <!-- ### Download and apply a patch -->
  <target name="apply-http-patch">
    <php function="basename" returnProperty="patch.file">
      <param>${patch.url}</param>
    </php>

    <!-- If patch has already been downloaded then we assume it has also been
         applied -->
    <if>
      <not><available file="${project.toolsdir}/${patch.file}"/></not>
      <then>
        <httpget url="${patch.url}"
                 dir="${project.toolsdir}"
                 proxy="${phing.httpget.proxy}" />
        <patch patchfile="${project.toolsdir}/${patch.file}"
               dir="${patch.dir}" haltonfailure="true"/>
      </then>
    </if>
  </target>

  <!-- ### Setup Phing Drush integration -->
  <target name="setup-phing-drush"
          depends="setup-dirs" >

    <!-- Register as custom Phing task -->
    <taskdef name="drush" classname="DrushTask"
             classpath="tools" />

    <!-- Run drush from the project Drupal directory -->
    <property name="drush.root" value="${project.drupal.dir}"/>
  </target>

   <!-- ### Setup Rhino

[Mozilla Rhino](http://www.mozilla.org/rhino/) is an open-source implementation of JavaScript written in Java. -->
   <target name="setup-rhino"
           depends="setup-dirs"
           unless="project.rhino.setup">
     <property name="rhino.dir"
               value="${project.toolsdir}/rhino" />
     <php function="basename" returnProperty="rhino.basename">
       <param value="${rhino.url}" />
       <!-- We assume that the version of Rhino used is a distribution
            where the filename ends in `.zip` -->
       <param value=".zip" />
     </php>

     <!-- Other targets use this property to determine the location of the
          `js.jar` file -->
     <property name="rhino.jar"
               value="${rhino.dir}/${rhino.basename}/js.jar"/>

     <!-- If the Rhino js.jar file is not available then download and
          unpack Rhino -->
     <if>
       <not><available file="${rhino.jar}"/></not>
       <then>
         <mkdir dir="${rhino.dir}" />
         <php function="basename" returnProperty="rhino.zipfile">
           <param value="${rhino.url}" />
         </php>
         <httpget url="${rhino.url}"
                  dir="${rhino.dir}"
                  proxy="${phing.httpget.proxy}"/>
         <unzip file="${rhino.dir}/${rhino.zipfile}"
                todir="${rhino.dir}" />
       </then>
     </if>

     <!-- Set property to prevent unnecessary additional invocations of this
          target -->
     <property name="project.rhino.setup" value="true" />
   </target>

</project>
